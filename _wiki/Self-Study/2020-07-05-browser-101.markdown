[DOM 완전 정복]

# HTML
모든 HTML 태그는 자바스크립트 노드로 파싱된다. 
HTML은 xml언어(마크업 혹은 태그로 구성된 언어)의 일종이며, 아는 자바스크립트의 노드(NODE)로 파싱되어 브라우저가 이해할 수 있는 자신만의 오브젝트 나무(DOM Tree)에 저장된다. 왜 브라우저의 DOM에 저장되는가? 한번 파싱하고 HTML 정보를 뽑아내 치워버리는 SAX 방식을 사용하지 않고, 모델에 데이터를 저장하는 방식을 취하는 이유는, 브라우저의 자원 낭비를 방지하기 위해서이다. 자주 Reloading되기 때문에 한번 파싱하고 치워버리는 방식을 선택하게 되면 자원 낭비가 심하다.
여튼 HTML TAG는 JavaScript의 노드로 파싱되고, 어느 시맨틱 태그를 사용하느냐에 따라 태그별로 Element가 존재하게 된다. 모든 노드는 **Event Target**을 상속받아, 이벤트가 발생할 수 있다. 
- addEventListener()
- removeEventListener()
- dispatchEvent() 
등의 API는 EventTarget의 API

Window는 **DOM(Tree 형태)**, **BOM(Browser Object Model)**, **Javascript**로 크게 구성된다. 

## DOM + CSS => CSSOM (Tree 재생성)
여기서 CSS의 종류에는
- External 로 정의한 css 파일
- HTML 파일에 embedded된 css 파일
- user-agent stylesheet 브라우저 자체에서 default로 정의한 css 파일
세 가지가 있다. 
DOM(데이터) + CSS(스타일)을 종합적으로 분석해서 Tree를 재구성한 것이 CSSOM
- Compute styles based on CSS cascading rules (위에서 아래로 폭포수처럼 쏟아지는)
: 이는 상위 노드에 css style을 적용하게 되면 자식 노드에도 한꺼번에 반영된다는 원칙이다.

## DOM + CSSOM => RENDER TREE (최종 사용자에게 보이는 아이들만 선별된다)
예를 들어 투명색은 **색**이니까 Render Tree에 포함된다. 투명색이라 사용자에게 보이지 않는 것일 뿐.
그러나 **display:none**은 진짜 Render Tree에 그려지지 않는다. 
Browser가 Server에
REQUEST(HTML 파일 요청) / RESPOND -> LOADING -> SCRIPTING(DOM 요소로 변환 + CSSOM 변환) -> RENDERING(RENDER TREE)

크게 **Construction** / **Operation**으로 나뉜다. 
- Construction: DOM + CSSOM + RENDER TREE
- Operation : LAYOUT + PAINT + COMPOSITION
PAINT 단계에서는 요소들을 레이어별로 어떻게 배치해놨는가에 따라 비트맵 파일을 미리 배치해 놓는다. 
CSS에 z-index를 지정해 놓았다면 그 방식대로 레이어를 구분하는 등...
 