[Linked List]
링크드 리스트는 가장 기본적인 자료구조다. 링크드 리스트는 많은 요소가 특정 순서로 그루핑되어 있거나, 연결되어 있는 구조이며, 데이터 컬렉션을 다루는데 효과적이다. 배열과 비슷한데, 배열에 비해 삽입/삭제가 용이한 장점이 있다. 
런타임에서 메모리가 할당되는 애플리케이션에 링크드 리스트가 자주 이용된다. (데이터 사이즈를 컴파일 타임에서 결정하지 못하는 애플리케이션의 경우)

- Singly-linked lists
하나의 포인터에 의해 요소가 연결됨. 이 구조는 처음 요소부터 마지막 요소까지 횡단할 수 있게 해준다. 노드가 포인터로 연결되어 있으니 포인터를 타고 처음부터 끝까지 횡단. (맨 앞에서 맨 뒤로)
- Doubly-linked lists
두 개의 포인터로 연결된 노드로 이루어진 구조. 앞 <-> 뒤 양쪽으로 횡단이 가능.
- Circular lists
마지막 요소에서 다음 노드로 연결되는 포인터가 NULL로 설정되지 않고, 맨 처음 요소에 연결된 구조. 순환 구조로 횡단할 수 있다.
- Mailing lists
이메일 어플리케이션에서 볼 수 있는 구조. (이해가 안됐음)
- Scrolled lists
GUI에서 자주 볼 수 있는 구조. 스크롤 리스트에서 아래에 위치하여 화면에 띄워지지 않은 아이템과 관련있다. 이런 '숨겨진' 데이터를 링크드 리스트로 연결하여 저장한다.
- Polynomials (다항식)
다항식은 프로그래밍 언어에 내재된 데이터 타입이 아니므로, 링크드 리스트로 연결하여 하나의 term(용어)로 관리하기에 적합하다.
- Memory management
OS의 중요한 역할이다. 운영체제는 프로세스를 시스템 상에서 돌아가게 하기 위해 메모리를 할당, 요구(reclaim)하는 결정권을 갖는다. 링크드 리스트는 사용가능한(잉여의) 메모리 portion(조각)을 찾아(keep track of) 연결하여 OS의 메모리 할당에 기여하는 역할을 한다.
- LISP
AI에 이용되는 프로그래밍 언어. (몰라도 될 것 같다)
- Linked allocation of files
외부 디스크 조각화를 제거하기 위해 사용되는 파일 정리? 할당? 방법으로 사용된다. 이는 순차적인 접근에만 효과적이며, 각각의 파일 블록은 그 다음 파일 블록으로 연결하기 위한 '포인터'를 갖고 있다.
- Other data structures
stacks, queues, sets, hash tables, graphs 등에 이용된다.


