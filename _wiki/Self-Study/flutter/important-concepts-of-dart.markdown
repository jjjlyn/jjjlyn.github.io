1. 다트는 int, double, 이 둘을 합친 num 타입을 지원한다. 
2. 다트의 함수는 일급 객체이다. 함수가 일급 객체란 의미는 하나의 어떤 '데이터 값'으로 취급될 수 있다는 것이다. 다른 변수의 데이터처럼 함수를 값으로 저장할 수 있고, 매개변수로 함수를 활용할 수 있으며, 이름이 없는 익명 함수로 사용될 수도 있다. 
3. 다트는 클래스의 단일상속을 지원한다.
클래스는 클래스이자 동시에 인터페이스 혹은 믹스인으로 사용될 수 있다. 
다트의 믹스인은 상속을 사용하지 않고, 사전에 구현된 메서드를 클래스에 추가할 수 있도록 해준다. 또한 추상 메서드, 추상 클래스 인터페이스를 지원한다.
4. 단일 스레드 언어
다른 언어에서는 스레드를 작업의 단위로 사용하지만, 다트는 isolate를 작업의 단위로 사용한다. isolate는 자체의 힙 메모리를 할당하는데, 메모리 공유는 허용하지 않는다. 각각의 isolate은 데이터 처리를 위해서 오로지 메시지를 주고 받는 방식으로만 소통할 수 있음.
5. 경고
6. 컴파일 타임 혹은 런타임 오류 
컴파일 오류는 코드 실행을 막고, 런타임 오류는 코드실행 도중 발생되는 예외를 야기한다.

* 싱글 스레드 안에 각각 독립된 isolate로 쪼개져 있고, isolate 안에는 각 isolate 내부에서 돌아가는 isolate - thread와, isolate 내부에서 할당된 스택 메모리와 힙 메모리가 있다. isolate 간 공유하는 전체 메모리가 없기 때문에 자원(힙 메모리)에 lock을 걸어줄 필요가 없어서 교착 혹은 경쟁 상태가 발생하지 않는다. Dart vm의 isolate 스케쥴링에 따라 각각 isolate가 concurrent하게 돌아가고, 거시적으로는 해당 프로세스가 속한 운영체제의 스케쥴링의 영향도 받는다(이것이 vm의 OS영향을 받는 측면).

main()은 main isolate이다. 
자바의 main()은 main thread이다.

stack > external heap & heap > method > code
var 정적지향 dynamic 동적지향

final과 const의 공통점과 차이점
const는 컴파일 타임에 값을 할당받는 상수
final은 런타임에 값을 할당받는 상수
const는 완전히 변경 불가능 / 컴파일 타임에 값을 할당 받음 / 값을 한정수식(const modifies 'values') / 원시 값 / 객체 변경 불가능 
final은 런타임 시 단일 할당

